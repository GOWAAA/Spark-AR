precision highp float;

#define time std::getTime()

// Namespace for all the SDF functions :)
// SDF::scene is the SDF to be rendered
namespace SDF {
    float sphere( vec3 p, float s ){
      return length(p)-s;
    };
    float box( vec3 p, vec3 b ){
      vec3 q = abs(p) - b;
      return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
    };
    float roundBox( vec3 p, vec3 b, float r ){
      vec3 q = abs(p) - b;
      return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;
    };
    float torus( vec3 p, vec2 t ){
      vec2 q = vec2(length(p.xz)-t.x,p.y);
      return length(q)-t.y;
    };
    float cone( in vec3 p, in vec2 c, float h ){
      // c is the sin/cos of the angle, h is height
      // Alternatively pass q instead of (c,h),
      // which is the point at the base in 2D
      vec2 q = h*vec2(c.x/c.y,-1.0);
        
      vec2 w = vec2( length(p.xz), p.y );
      vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );
      vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );
      float k = sign( q.y );
      float d = min(dot( a, a ),dot(b, b));
      float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );
      return sqrt(d)*sign(s);
    };
    float octahedron( vec3 p, float s){
      p = abs(p);
      float m = p.x+p.y+p.z-s;
      vec3 q;
           if( 3.0*p.x < m ) q = p.xyz;
      else if( 3.0*p.y < m ) q = p.yzx;
      else if( 3.0*p.z < m ) q = p.zxy;
      else return m*0.57735027;
        
      float k = clamp(0.5*(q.z-q.y+s),0.0,s);
      return length(vec3(q.x,q.y-s+k,q.z-k));
    };
    float opSmoothUnion( float d1, float d2, float k ) {
        float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
        return mix( d2, d1, h ) - k*h*(1.0-h);
    };
    float opSmoothSubtraction( float d1, float d2, float k ) {
        float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
        return mix( d2, -d1, h ) + k*h*(1.0-h);
    };

    float opSmoothIntersection( float d1, float d2, float k ) {
        float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
        return mix( d2, d1, h ) + k*h*(1.0-h);
    };
    float scene(vec3 pos){
        // Rotation matrix (X axis)
        mat3 rotation = mat3(vec3(1,0,0),
                                 vec3(0,cos(time),-sin(time)),
                                 vec3(0,sin(time),cos(time)));
        
        float t = octahedron(((pos - vec3(0,0.02,0) * rotation) * rotation), 0.01);
        
        float s = sphere(pos, 0.005);
        
        float b = box(
                      pos-vec3(sin(time * 0.7) * 0.03, 0, 0),
                      vec3(0.005)
                      );
                      
        float finalSDF;
        finalSDF = opSmoothUnion(s, b, 0.008);
        finalSDF = opSmoothUnion(finalSDF, t, 0.005);
        
        return finalSDF;
    };
};

vec3 getCameraRayDir(vec2 uv, vec3 camPos, vec3 camTarget){
    vec3 camForward = normalize(camTarget - camPos);
    vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));
    vec3 camUp = normalize(cross(camForward, camRight));
    
    float fPersp = 2.;
    vec3 vDir = normalize(uv.x * camRight + uv.y * camUp + camForward * fPersp);
 
    return vDir;
};

float castRay(vec3 rayOrigin, vec3 rayDir){
    float t = 0.; // Distance along ray
     
    // More iterations leads to better quality/less artifacts but it will reduce performace
    for (int i = 0; i < 64; i++){
        float res = SDF::scene(rayOrigin + rayDir * t);
        if (res < (0.0001*t)){
            return t;
        };
        t += res;
    };
    
    return -1.0;
};

// Calculate the normals for a shape
vec3 calcNormal(vec3 pos){
    // Center sample
    float c = SDF::scene(pos);
    vec2 eps_zero = vec2(0.001, 0.0);
    return normalize(vec3( SDF::scene(pos + eps_zero.xyy), SDF::scene(pos + eps_zero.yxy), SDF::scene(pos + eps_zero.yyx) ) - c);
};

// Hard Shadows
//float shadow( vec3 ro, vec3 rd, float mint, float maxt ){
//    float t = mint;
//    for ( int i = 0; i < 32; ++i ){
//        float h = SDF::scene( ro + rd * t );
//        if ( h < 0.001 )
//            return 0.0;
//        t += h;
//
//        if ( t > maxt )
//            break;
//    };
//    return 1.0;
//};

float shadowSoft( vec3 ro, vec3 rd, float mint, float maxt, float k ){
    float t = mint;
    float res = 1.0;
    for ( int i = 0; i < 32; ++i ){
        float h = SDF::scene( ro + rd * t );
        if ( h < 0.001 )
            return 0.0;
        
        res = min( res, k * h / t );
        t += h;
        
        if ( t > maxt )
            break;
    };
    return res;
};

vec3 shade( vec3 pos, vec3 nrm, vec4 light ){
    vec3 toLight = light.xyz - pos;
    
    float toLightLen = length( toLight );
    toLight = normalize( toLight );
    
    float comb = 0.1;
    
    float vis = shadowSoft( pos, toLight, 0.0625, toLightLen, 8.0 );
    
    if ( vis > 0.0 ){
        float diff = 2.0 * max( 0.0, dot( nrm, toLight ) );
        float attn = 1.0 - pow( min( 1.0, toLightLen / light.w ), 2.0 );
        comb += diff * attn * vis;
    };
    return vec3( comb, comb, comb );
};

vec4 render(vec3 rayOrigin, vec3 rayDir){
    vec4 col;
    float t = castRay(rayOrigin, rayDir);
 
    if (t != -1.0){
        // our ray hit the scene, so shade it with 2 lights
        vec3 pos = rayOrigin + rayDir * t;
        // Normals of the shape
        vec3 N = normalize(calcNormal(pos));
        
        // Light 1
        vec4 L1 = vec4(
                  sin(time * 2.2),
                  2.,
                  cos(time * 2.2),
                  3.
                  );
        L1 = normalize(L1);
        
        // Light 1
        vec4 L2 = vec4(
                  cos(time * 2.2),
                  2.,
                  sin(time * 2.2),
                  3.
                  );
        L2 = normalize(L2);
        
        vec3 shade1 = shade( pos, N, L1 );
        vec3 shade2 = shade( pos, N, L2 );
        
        // Shade
        vec3 shadeAll =
            shade1 * (vec3( 1.0, 0.3, 0.2 ))
            + shade2 * (vec3( 0.1, 0.2, 1.0 ));
        
        col = vec4(shadeAll,1);
    } else {
        // The ray hit nothing, render as 0,0,0,0 (transparent)
        col = vec4(0);
    };
    col = pow(col, vec4(0.4545, 0.4545, 0.4545, 1));
    return col;
};

vec2 normalizeScreenCoords(vec2 screenCoord){
    vec2 result = 2.0 * (screenCoord - 0.5);
    return result;
};

// @main
void main(in function<vec4(vec2)> image, out vec4 fragColor) {
    // The "image" isn't used *yet*, it's for future functions
    vec2 uv = fragment(normalizeScreenCoords(std::getVertexTexCoord()));

    vec4 p = fragment(std::getVertexPosition());
    // Thanks @alwayscodingsomething for the matrix help
    mat4 im = std::getInverseModelMatrix();
    vec4 cam = std::getCameraPosition();
    vec4 oro = im*cam;
    vec3 ro = oro.xyz;
    vec3 rd = normalize(p.xyz-ro);
    
    vec4 col = render(ro, rd);//
    
    fragColor = vec4(col);
};
